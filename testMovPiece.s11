.=torg+1000
main:
     mov #main, sp ; setting the stack
     mov #board, -(sp) ; pushing #board to stack
     jsr r5, movPiece
     .word 10
     .word 17
     halt


; This method will move a player from the source position to the destanation
; position.
;
; Input:
; 1. Source position - will be stored at r5 - inline
; 2. Destanation position - will be stored at 2(r5) - inline
; 3. Label of the board - will be stored at 2(sp).

movPiece:
         mov r1, -(sp) ; Backing up  r1.
         mov r3, -(sp) ; Backing up  r3.
         ; Now we will calculate the address of source position and put it in r1.
         mov (r5)+, r1 ; r1 = index of source position
         mul #2, r1 ; r1 = 2*r1 . This is in order to calculate the address.
         add 6(sp), r1 ; r1 = r1 + address of beginning of the board.
         ; Now we will calculate the address of dest position and put it in r3.
         mov (r5)+, r3 ; r3 = index of destanation position
         mul #2, r3 ; r3 = 2*r3 .  This is in order to calculate the address.
         add 6(sp), r3 ; r3 = r3 + address of beginning of the board.

         ; Making the changes.
         mov (r1), (r3) ; board[dest] = board[source].
         mov 0, (r1) ; board[source] = 0.

         ; Now we need to check if there was an eat. We will find the address
         ; in the middle between the source address and the dest address.
         ; Notice that if there was an eat then the address of the middle cell
         ; is a multiply of 2 and it is: (src_addr + dest_addr)/2 . In that case
         ; we also need to put 0 in that place.
         ; If there was no eat then the address of the middle cell is not a
         ; multiply of 2 and so we need to finish the function.
         mov r0, -(sp) ; Backing up r0.
         mov (r1), (r0) ; r0 = address of source position.
         add (r3), (r0) ; r0 = r0 + address of dest position.
         div #2, (r0) ; r1 will hold the remainer. r0 will hold the middle addr.
         cmp (r1), 0 ;
         bne endmop ; if the remainer is not zero there was no eat. goto endmop.
         ; If we got here then the remainer is zero. it means that there was an
         ; eat and we need to put 0 in the eaten place.
         ; Notice that the eaten place is at r0.
         mov 0, (r0)
         ; Method is done. Restoring registers.
         endmop:
                mov (sp)+, r0 ; Restoring value of r0.
                mov (sp)+, r3 ; Restoring value of r4.
                mov (sp)+, r1 ; Restoring value of r3.
                rts r5

.=torg+5000

Board:
      .word 0, 0, 0, 0, 0, 0, 0, 0
      .word 1, 0, 0, 0, 0, 0, 0, 0
      .word 0, 0, 0, 0, 0, 0, 0, 0
      .word 0, 0, 0, 0, 0, 0, 0, 0
      .word 0, 0, 0, 0, 0, 0, 0, 0
      .word 0, 0, 0, 0, 0, 0, 0, 0
      .word 0, 0, 0, 0, 0, 0, 0, 0
      .word 0, 0, 0, 0, 0, 0, 0, 0
